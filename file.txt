diamond.py
from lexer import tokenize
from expression_parser import eval_expr
import sys

functions = {}
loop_context = {
    'break': False,
    'continue': False,
    'return_value': None
}

class Scope:
    def __init__(self, parent=None):
        self.variables = {}
        self.parent = parent
        self.return_value = None

    def get(self, name):
        if name in self.variables:
            return self.variables[name]
        if self.parent:
            return self.parent.get(name)
        return globals().get(name)

    def set(self, name, value):
        if name in self.variables:
            # print(f"DEBUG: Updating variable '{name}' to {value}")
            self.variables[name] = value
        elif self.parent:
            self.parent.set(name, value)
        else:
            # print(f"DEBUG: Creating variable '{name}' = {value}")
            self.variables[name] = value



def evaluate_expression(expr, scope, lineno=None):
    if scope is None:
        raise RuntimeError("Scope was not provided to evaluate_expression")

    if isinstance(expr, str):
        if expr.startswith("bula dost"):
            func_name = expr[9:expr.find("(")].strip()
            args_str = expr[expr.find("(")+1:expr.find(")")].strip()
            args = [arg.strip() for arg in args_str.split(",")] if args_str else []
            return execute_token(("FUNC_CALL", func_name, args, lineno), scope=scope)

        try:
            return eval_expr(expr, scope)
        except Exception as e:
            print(f"Line {lineno if lineno else '?'}: Expression Error: {e} => '{expr}'")
            return None

    return expr

def execute_token(token, tokens=None, index=None, scope=None):
    if scope is None:
        raise RuntimeError("Scope was not provided to execute_token")

    try:
        type_ = token[0]
        args = token[1:-1] if len(token) > 2 else token[1:]
        lineno = token[-1] if len(token) > 2 else None

        if type_ == "PRINT":
            value = evaluate_expression(args[0], scope, lineno)
            print(value)

        elif type_ == "VAR_DECLARATION":
            var_name = args[0]
            value = evaluate_expression(args[1], scope, lineno) if args[1] is not None else None
            scope.set(var_name, value)

        elif type_ == "ASSIGNMENT":
            var_name = args[0]
            value = evaluate_expression(args[1], scope, lineno)
            scope.set(var_name, value)


        elif type_ == "FUNC_DEF":
            if tokens and index is not None:
                func_name, params = args
                body = []
                i = index + 1
                while i < len(tokens) and tokens[i][0] != "END":
                    body.append(tokens[i])
                    i += 1
                functions[func_name] = (params, body)
                return i + 1

        elif type_ == "FUNC_CALL":
            func_name, call_args = args
            if func_name not in functions:
                raise Exception(f"Function '{func_name}' is not defined.")
            params, body = functions[func_name]
            old_scope = scope
            new_scope = Scope(old_scope)
            scope = new_scope

            for param, arg in zip(params, call_args):
                value = evaluate_expression(arg, old_scope, lineno)
                scope.set(param, value)

            for t in body:
                result = execute_token(t, scope=scope)
                if scope.return_value is not None:
                    break

            result = scope.return_value
            scope = old_scope
            return result

        elif type_ == "RETURN":
            value = evaluate_expression(args[0], scope, lineno) if args[0] else None
            scope.return_value = value
            return value

        elif type_ == "IF":
            condition = evaluate_expression(args[0], scope, lineno)
            i = index + 1

            if condition:
                # Execute IF block
                while i < len(tokens) and tokens[i][0] not in ("ELSE", "END"):
                    execute_token(tokens[i], scope=scope)
                    i += 1

                # Skip ELSE block if it exists
                while i < len(tokens) and tokens[i][0] != "END":
                    i += 1

            else:
                # Skip to ELSE
                while i < len(tokens) and tokens[i][0] != "ELSE":
                    i += 1
                i += 1  # Move past 'ELSE'

                # Execute ELSE block
                while i < len(tokens) and tokens[i][0] != "END":
                    execute_token(tokens[i], scope=scope)
                    i += 1

            return i


        elif type_ == "WHILE":
            i = index + 1
            body = []

            while i < len(tokens) and tokens[i][0] != "END":
                body.append(tokens[i])
                i += 1

            # Prevent infinite loop crash (optional)
            loop_guard = 0
            while evaluate_expression(args[0], scope, lineno):
                loop_guard += 1
                if loop_guard > 1000:
                    print("⚠️ Infinite loop protection triggered")
                    break

                for t in body:
                    execute_token(t, scope=scope)

            return i  # index after END


        elif type_ == "FOR":
            var, start_expr, end_expr, step_expr = args
            start_val = int(evaluate_expression(start_expr, scope, lineno))
            end_val = int(evaluate_expression(end_expr, scope, lineno))
            step_val = int(evaluate_expression(step_expr, scope, lineno))
            i = index + 1
            block_start = i
            while i < len(tokens) and tokens[i][0] != "END":
                i += 1
            block_end = i
            for v in range(start_val, end_val + 1, step_val):
                scope.set(var, v)
                j = block_start
                while j < block_end:
                    execute_token(tokens[j], scope=scope)
                    j += 1
            return block_end

        elif type_ == "END":
            return index

    except Exception as e:
        print(f"Line {lineno if lineno else '?'}: Execution Error at token {token}: {e}")
        return index + 1

def run(file_path):
    scope = Scope()

    with open(file_path, "r") as f:
        code = f.read()

    tokens = tokenize(code)
    i = 0
    while i < len(tokens):
        if tokens[i][0] in ("FUNC_DEF", "IF", "WHILE", "FOR"):
            result = execute_token(tokens[i], tokens, i, scope=scope)
            i = result if result is not None else i + 1
        else:
            execute_token(tokens[i], scope=scope)
            i += 1

def main():
    if len(sys.argv) != 2:
        print("Usage: diamond <file.diamond>")
        sys.exit(1)
    file_path = sys.argv[1]
    run(file_path)

if __name__ == "__main__":
    main()



lexer.py
# Updated lexer.py with line number tracking for error handling

def tokenize(code):
    tokens = []
    lines = code.splitlines()

    for lineno, line in enumerate(lines, start=1):
        line = line.strip()

        if not line or line.startswith("#"):
            continue

        if line.startswith("bata dost") or line.startswith("likh dost"):
            tokens.append(("PRINT", line.split("dost", 1)[1].strip(), lineno))


        elif line.startswith("bana dost"):
            var_part = line[9:].strip()
            if "=" in var_part:
                var_name, value = var_part.split("=", 1)
                tokens.append(("VAR_DECLARATION", var_name.strip(), value.strip(), lineno))
            else:
                tokens.append(("VAR_DECLARATION", var_part.strip(), None, lineno))

        elif line.startswith("kaam dost"):
            func_def = line[9:].strip()
            if "(" in func_def and ")" in func_def:
                func_name = func_def[:func_def.find("(")].strip()
                params_str = func_def[func_def.find("(")+1:func_def.find(")")].strip()
                params = [p.strip() for p in params_str.split(",") if p.strip()]
                tokens.append(("FUNC_DEF", func_name, params, lineno))
            else:
                tokens.append(("FUNC_DEF", func_def, [], lineno))

        elif line.startswith("bula dost"):
            func_call = line[9:].strip()
            if "(" in func_call and ")" in func_call:
                func_name = func_call[:func_call.find("(")].strip()
                args_str = func_call[func_call.find("(")+1:func_call.find(")")].strip()
                args = [arg.strip() for arg in args_str.split(",") if arg.strip()]
                tokens.append(("FUNC_CALL", func_name, args, lineno))
            else:
                tokens.append(("FUNC_CALL", func_call.replace("()", ""), [], lineno))

        elif line.startswith("wapas dost"):
            value = line[10:].strip()
            tokens.append(("RETURN", value if value else None, lineno))

        elif line.startswith("agar dost"):
            tokens.append(("IF", line[9:].strip(), lineno))

        elif line.startswith("nahi to dost"):
            tokens.append(("ELSE", None, lineno))

        elif line.startswith("jab tak dost"):
            tokens.append(("WHILE", line[12:].strip(), lineno))

        elif line.startswith("ghum dost"):
            parts = line[9:].strip().split()
            if len(parts) >= 5 and parts[1] == "se" and "tak" in parts:
                try:
                    tak_index = parts.index("tak")
                    var_name = parts[0]
                    start = parts[2]
                    end = parts[tak_index + 1]
                    step = parts[tak_index + 3] if len(parts) > tak_index + 3 else "1"
                    tokens.append(("FOR", var_name, start, end, step, lineno))
                except:
                    tokens.append(("UNKNOWN", line, lineno))

        elif line.startswith("bas dost"):
            tokens.append(("END", None, lineno))

        elif "=" in line and not line.startswith("bana dost"):
            var_name, value = line.split("=", 1)
            tokens.append(("ASSIGNMENT", var_name.strip(), value.strip(), lineno))


        else:
            tokens.append(("UNKNOWN", line, lineno))

    return tokens



expression_parser.py
import re

# Token types
NUMBER, IDENTIFIER, OPERATOR, LPAREN, RPAREN, EOF = (
    'NUMBER', 'IDENTIFIER', 'OPERATOR', 'LPAREN', 'RPAREN', 'EOF'
)

# Token specification for basic expressions
token_specification = [
    ('STRING',   r'"[^"\n]*"'),               # Double-quoted string
    (NUMBER,     r'\d+(\.\d+)?'),             # Integer or decimal number
    (IDENTIFIER, r'[A-Za-z_]\w*'),            # Variable names
    (OPERATOR,   r'==|!=|<=|>=|[+\-*/%<>]'),   # Operators
    (LPAREN,     r'\('),                      # (
    (RPAREN,     r'\)'),                      # )
    ('SKIP',     r'[ \t]+'),                  # Whitespace
    ('MISMATCH', r'.'),                       # Unexpected characters
]

tok_regex = '|'.join(f'(?P<{name}>{regex})' for name, regex in token_specification)
get_token = re.compile(tok_regex).match

# Tokenizer
def tokenize_expr(expr):
    tokens = []
    pos = 0
    mo = get_token(expr)
    while mo:
        kind = mo.lastgroup
        value = mo.group()
        if kind == 'STRING':
            tokens.append(('STRING', value[1:-1]))  # Strip quotes
        elif kind == NUMBER:
            value = float(value) if '.' in value else int(value)
            tokens.append((NUMBER, value))
        elif kind == IDENTIFIER:
            tokens.append((IDENTIFIER, value))
        elif kind == OPERATOR:
            tokens.append((OPERATOR, value))
        elif kind in (LPAREN, RPAREN):
            tokens.append((kind, value))
        elif kind == 'SKIP':
            pass
        elif kind == 'MISMATCH':
            raise SyntaxError(f"Unexpected character: {value}")
        pos = mo.end()
        mo = get_token(expr, pos)
    tokens.append((EOF, None))
    return tokens

# AST Nodes
class BinOp:
    def __init__(self, left, op, right): self.left, self.op, self.right = left, op, right
class Num:
    def __init__(self, value): self.value = value
class Var:
    def __init__(self, name): self.name = name
class Str:
    def __init__(self, value): self.value = value

# Recursive descent parser
class Parser:
    def __init__(self, tokens): self.tokens = tokens; self.pos = 0

    def current(self): return self.tokens[self.pos]
    def eat(self, kind):
        if self.current()[0] == kind:
            self.pos += 1
        else:
            raise SyntaxError(f"Expected {kind}, got {self.current()}")

    def parse(self):
        return self.comparison_expr()

    def comparison_expr(self):
        node = self.expr()
        while self.current()[0] == OPERATOR and self.current()[1] in ('==', '!=', '<', '<=', '>', '>='):
            op = self.current()[1]
            self.eat(OPERATOR)
            right = self.expr()
            node = BinOp(node, op, right)
        return node

    def expr(self):
        node = self.term()
        while self.current()[0] == OPERATOR and self.current()[1] in ('+', '-'):
            op = self.current()[1]
            self.eat(OPERATOR)
            node = BinOp(node, op, self.term())
        return node


    def term(self):
        node = self.factor()
        while self.current()[0] == OPERATOR and self.current()[1] in ('*', '/', '%'):
            op = self.current()[1]
            self.eat(OPERATOR)
            node = BinOp(node, op, self.factor())
        return node

    def factor(self):
        tok_type, tok_val = self.current()
        if tok_type == NUMBER:
            self.eat(NUMBER)
            return Num(tok_val)
        elif tok_type == IDENTIFIER:
            self.eat(IDENTIFIER)
            return Var(tok_val)
        elif tok_type == 'STRING':
            self.eat('STRING')
            return Str(tok_val)
        elif tok_type == LPAREN:
            self.eat(LPAREN)
            node = self.expr()
            self.eat(RPAREN)
            return node
        else:
            raise SyntaxError(f"Unexpected token: {self.current()}")

# Evaluator
def evaluate_ast(node, scope):
    if isinstance(node, Num):
        return node.value
    elif isinstance(node, Str):
        return node.value
    elif isinstance(node, Var):
        value = scope.get(node.name)
        # print(f"DEBUG: Variable lookup '{node.name}' = {value}") 
        if value is None:
            raise NameError(f"Variable '{node.name}' not defined")
        return value
    elif isinstance(node, BinOp):
        left = evaluate_ast(node.left, scope)
        right = evaluate_ast(node.right, scope)
        # print(f"DEBUG: BINOP -> {left} {node.op} {right}") # ✅ Add this
        return eval_binary(left, node.op, right)

def eval_binary(left, op, right):
    # print(f"DEBUG: Evaluating binary: {left} {op} {right}")
    if op == '+': return left + right
    elif op == '-': return left - right
    elif op == '*': return left * right
    elif op == '/': return left / right
    elif op == '%': return left % right
    elif op == '<': return left < right
    elif op == '>': return left > right
    elif op == '<=': return left <= right
    elif op == '>=': return left >= right
    elif op == '==': return left == right
    elif op == '!=': return left != right
    else: raise ValueError(f"Unknown operator: {op}")

# Entry point
def eval_expr(expr, scope):
    tokens = tokenize_expr(expr)
    parser = Parser(tokens)
    ast = parser.parse()
    return evaluate_ast(ast, scope)
